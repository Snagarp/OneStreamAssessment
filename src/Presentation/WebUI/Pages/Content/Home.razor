@page "/content/home"
@using Application.DTO.Request.Vehicles
@using Application.DTO.Response.Vehicles
@using Application.DTO.Response
@using Mapster
@using Microsoft.AspNetCore.Authorization
@using NetcodeHub.Packages.Components
@using NetcodeHub.Packages.Components.Toast
@inject ToastService toastService
@attribute [Authorize(Roles = "Admin,User")]
<PageTitle>Home</PageTitle>

<div class="row">
    <div class="col-xl-12 col-lg-12 col-md-12 clo-sm-12">
        <div class="card border-1 shadow-lg">
            <div class="card-header fw-bold text-info fs-4">
                Vehicles Information
                <button class="btn btn-info float-end" @onclick="AddVehicleClicked">+ Add Vehicle</button>
            </div>
            <div class="card-body">
                @if (Vehicles != null)
                {
                    <NetcodeHubDataGrid HeaderBGColor="@HeaderBGColor.Info"
                                        HeaderColor="@HeaderColor.Dark"
                                        HeaderFont="@HeaderFont.TimesNewRoman"
                                        HeaderSize="@HeaderSize.Large"
                                        ContentFont="@ContentFont.Cambria"
                                        DataGridFormat="@DataGridFormat.Info" CustomStyle="padding:10px">
                        <HeaderTemplate>
                            <th>Id</th>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Brand</th>
                            <th>Owner</th>
                            <th>Actions</th>
                        </HeaderTemplate>
                        <ContentTemplate>
                            @foreach (var item in Vehicles)
                            {
                                <tr>
                                    <td>@item.Id</td>
                                    <td>@item.Name</td>
                                    <td>@item.Description</td>
                                    <td>@item.VehicleBrand?.Name</td>
                                    <td>@item.VehicleOwner?.Name</td>
                                    <td>
                                        <small class="text-info cursorStyle" @onclick="()=>EditVehicleClicked(item)">Edit</small>
                                        <AuthorizeView Roles="Admin">
                                            |
                                            <small class="text-danger cursorStyle" @onclick="()=>DeleteVehicleClicked(item)">Delete</small>
                                        </AuthorizeView>
                                    </td>
                                </tr>
                            }
                        </ContentTemplate>
                    </NetcodeHubDataGrid>
                }
                else
                {
                    <em class="text-success text-center fw-bold shadow-lg border-1">Loading data...</em>
                }
            </div>
        </div>
    </div>
</div>
<div class="row mt-3">
    <div class="col-xl-6 col-lg-6 col-md-12 col-sm-12">
        <div class="card border-1 shadow-lg">
            <div class="card-header fw-bold text-success fs-2">
                Vehicle Brands
                <button class="btn btn-success float-end" @onclick="AddBrandClicked">+ Add Brand</button>
            </div>
            <div class="card-body">
                @if (VehicleBrands != null)
                {
                    <NetcodeHubDataGrid HeaderBGColor="@HeaderBGColor.Success"
                                        HeaderColor="@HeaderColor.Dark"
                                        HeaderFont="@HeaderFont.TimesNewRoman"
                                        HeaderSize="@HeaderSize.Large"
                                        ContentFont="@ContentFont.Cambria"
                                        DataGridFormat="@DataGridFormat.Success" CustomStyle="padding:10px">
                        <HeaderTemplate>
                            <th>Id</th>
                            <th>Name</th>
                            <th>Location</th>
                            <th>Actions</th>
                        </HeaderTemplate>
                        <ContentTemplate>
                            @foreach (var item in VehicleBrands)
                            {
                                <tr>
                                    <td>@item.Id</td>
                                    <td>@item.Name</td>
                                    <td>@item.Location</td>

                                    <td>
                                        <small class="text-info cursorStyle" @onclick="()=>EditVehicleBrandClicked(item)">Edit</small>
                                        <AuthorizeView Roles="Admin">
                                            |
                                            <small class="text-danger cursorStyle" @onclick="()=>DeleteVehicleBrandClicked(item)">Delete</small>
                                        </AuthorizeView>
                                    </td>
                                </tr>
                            }
                        </ContentTemplate>
                    </NetcodeHubDataGrid>
                }
                else
                {
                    <em class="text-success text-center fw-bold shadow-lg border-1">Loading data...</em>
                }
            </div>
        </div>
    </div>
    <div class="col-xl-6 col-lg-6 col-md-12 col-sm-12">
        <div class="card border-1 shadow-lg">
            <div class="card-header fw-bold text-warning fs-4">
                Vehicle Owners
                <button class="btn btn-warning float-end" @onclick="AddOwnerClicked">+ Add Owner</button>
            </div>
            <div class="card-body">
                @if (VehicleOwners != null)
                {
                    <NetcodeHubDataGrid HeaderBGColor="@HeaderBGColor.Warning"
                                        HeaderColor="@HeaderColor.Dark"
                                        HeaderFont="@HeaderFont.TimesNewRoman"
                                        HeaderSize="@HeaderSize.Large"
                                        ContentFont="@ContentFont.Cambria"
                                        DataGridFormat="@DataGridFormat.Warning" CustomStyle="padding:10px">
                        <HeaderTemplate>
                            <th>Id</th>
                            <th>Name</th>
                            <th>Address</th>
                            <th>Actions</th>
                        </HeaderTemplate>
                        <ContentTemplate>
                            @foreach (var item in VehicleOwners)
                            {
                                <tr>
                                    <td>@item.Id</td>
                                    <td>@item.Name</td>
                                    <td>@item.Address</td>
                                    <td>
                                        <small class="text-info cursorStyle" @onclick="()=>EditVehicleOwnerClicked(item)">Edit</small>
                                        <AuthorizeView Roles="Admin">
                                            |
                                            <small class="text-danger cursorStyle" @onclick="()=>DeleteVehicleOwnerClicked(item)">Delete</small>
                                        </AuthorizeView>
                                    </td>
                                </tr>
                            }
                        </ContentTemplate>
                    </NetcodeHubDataGrid>
                }
                else
                {
                    <em class="text-success text-center fw-bold shadow-lg border-1">Loading data...</em>
                }
            </div>
        </div>
    </div>
</div>
<Confirmation @ref="confirmation" Instruction="@Instruction" Action="ConfirmDelete" BoostrapClass="@ComfirmationBorder" CustomStyle="width:300px;" />
<Toast @ref="toastService.ToastComponent" IconClass="bi bi-check" Persist="true" Duration=@ToastDuration />
<Modal @bind-Open="IsOpen" BootstrapClass="@BorderClass" CustomStyle="min-width:400px; max-width:500px;">
    <ContentContent>
        <div class="card border-1 shadow-lg p-3">
            <div class="card-header">
                @ModalTitle
                <span class="float-end txt-danger fw-bold cursorStyle" style="font-family:'Comic Sans MS'" @onclick="CancelForm">X</span>
            </div>
            <div class="card-body">
            </div>
            @if (ShowVehicleBrandModel)
            {
                <EditForm Model="CreateVehicleBrandModel" OnValidSubmit="SaveVehicleBrand">
                    <DataAnnotationsValidator />
                    <FloatingText Label="Brand Name" @bind-Value="CreateVehicleBrandModel.Name" class="form-control"></FloatingText>
                    <FloatingText Label="Brand Location" @bind-Value="CreateVehicleBrandModel.Location" class="form-control"></FloatingText>
                    <div class="form-group mt-3">
                        <button class="btn btn-primary float-end" type="submit">Save</button>
                    </div>
                    <div class="input-group mt-3">
                        <ValidationSummary />
                    </div>
                </EditForm>
            }
            @if (ShowVehicleOwnerModel)
            {
                <EditForm Model="CreateVehicleOwnerModel" OnValidSubmit="SaveVehicleOwner">
                    <DataAnnotationsValidator />
                    <FloatingText Label="Owner Name" @bind-Value="CreateVehicleOwnerModel.Name" class="form-control"></FloatingText>
                    <FloatingText Label="Owner Location" @bind-Value="CreateVehicleOwnerModel.Address" class="form-control"></FloatingText>
                    <div class="form-group mt-3">
                        <button class="btn btn-primary float-end" type="submit">Save</button>
                    </div>
                    <div class="input-group mt-3">
                        <ValidationSummary />
                    </div>
                </EditForm>
            }
            @if (ShowVehicleModel)
            {
                <EditForm Model="CreateVehicleModel" OnValidSubmit="SaveVehicle">
                    <DataAnnotationsValidator />
                    <FloatingText Label="Vehicle Name" @bind-Value="CreateVehicleModel.Name" class="form-control"></FloatingText>
                    <FloatingTextArea Label="Vehicle Description" @bind-Value="CreateVehicleModel.Description" class="form-control mt-3" />

                    <label class="form-label mt-2">Select Brand</label>
                    <select class="form-select" @bind="CreateVehicleModel.VehicleBrandId">
                        <option> Select Brand </option>
                        @if (VehicleBrands != null)
                        {
                            foreach (var item in VehicleBrands!)
                            {
                                <option value="@item.Id"> @item.Name</option>
                            }
                        }
                    </select>

                    <label class="form-label mt-2">Select Owner</label>
                    <select class="form-select" @bind="CreateVehicleModel.VehicleOwnerId">
                        <option> Select Owner </option>
                        @if (VehicleOwners != null)
                        {
                            foreach (var item in VehicleOwners!)
                            {
                                <option value="@item.Id"> @item.Name</option>
                            }
                        }
                    </select>
                    <div class="form-group mt-3">
                        <button class="btn btn-primary float-end" type="submit">Save</button>
                    </div>
                    <div class="input-group mt-3">
                        <ValidationSummary />
                    </div>
                </EditForm>
            }
        </div>
    </ContentContent>
</Modal>
<style>
    .cursorStyle {
        cursor: pointer;
    }
</style>
@code {
    private string ModalTitle = string.Empty;
    private string BorderClass = string.Empty;
    public bool IsOpen { get; set; }

    public int ToastDuration { get; set; } = 2000;
    Confirmation? confirmation;
    string? ComfirmationBorder;
    string Instruction = "Are you sure you wanna do this?";

    private CreateVehicleRequestDTO CreateVehicleModel { get; set; } = new();
    private CreateVehicleBrandRequestDTO CreateVehicleBrandModel { get; set; } = new();
    private CreateVehicleOwnerRequestDTO CreateVehicleOwnerModel { get; set; } = new();

    private IEnumerable<GetVehicleResponseDTO> Vehicles { get; set; } = [];
    private IEnumerable<GetVehicleBrandResponseDTO> VehicleBrands { get; set; } = [];
    private IEnumerable<GetVehicleOwnerResponseDTO> VehicleOwners { get; set; } = [];


    public bool ShowVehicleModel { get; set; } = false;
    public bool ShowVehicleBrandModel { get; set; } = false;
    public bool ShowVehicleOwnerModel { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        Vehicles = await vehicleService.GetVehicles();
        VehicleBrands = await vehicleService.GetVehicleBrands();
        VehicleOwners = await vehicleService.GetVehicleOwners();
    }

    void AddOwnerClicked()
    {
        ModalTitle = "Add Vehicle Owner";
        ResetAllShowStates();
        ResetAllModels();
        BorderClass = "border-warning rounded p-2 ml-2 mr-2 shadow-lg";
        ShowVehicleOwnerModel = true;
        OpenModal();
    }
    void AddBrandClicked()
    {
        ModalTitle = "Add Vehicle Brand";
        ResetAllShowStates();
        ResetAllModels();
        BorderClass = "border-success rounded p-2 ml-2 mr-2 shadow-lg";
        ShowVehicleBrandModel = true;
        OpenModal();
    }
    async Task AddVehicleClicked()
    {
        VehicleBrands = await vehicleService.GetVehicleBrands();
        VehicleOwners = await vehicleService.GetVehicleOwners();
        ModalTitle = "Add Vehicle";
        ResetAllShowStates();
        ResetAllModels();
        BorderClass = "border-info rounded p-2 ml-2 mr-2 shadow-lg";
        ShowVehicleModel = true;
        OpenModal();
    }

    void ResetAllModels()
    {
        CreateVehicleModel = new();
        CreateVehicleBrandModel = new();
        CreateVehicleOwnerModel = new();
    }
    void ResetAllShowStates()
    {
        ShowVehicleOwnerModel = false;
        ShowVehicleBrandModel = false;
        ShowVehicleModel = false;
    }
    void CancelForm() => IsOpen = false;
    void OpenModal() => IsOpen = true;

    private int IdHolder = 0;
    public string ModelName = string.Empty;

    Response Response = new();
    async Task SaveVehicleBrand()
    {
        if (IdHolder > 0)
        {
            var data = CreateVehicleBrandModel.Adapt(new UpdateVehicleBrandRequestDTO());
            data.Id = IdHolder;
            Response = await vehicleService.UpdateVehicleBrand(data);
        }
        else { Response = await vehicleService.AddVehicleBrand(CreateVehicleBrandModel); }

        ModelName = ModelNames.VehicleBrand;
        await DisplayToastMessage(Response);
    }
    async Task SaveVehicleOwner()
    {
        if (IdHolder > 0)
        {
            var data = CreateVehicleOwnerModel.Adapt(new UpdateVehicleOwnerRequestDTO());
            data.Id = IdHolder;
            Response = await vehicleService.UpdateVehicleOwner(data);
        }
        else { Response = await vehicleService.AddVehicleOwner(CreateVehicleOwnerModel); }

        ModelName = ModelNames.VehicleOwner;
        await DisplayToastMessage(Response);
    }
    async Task SaveVehicle()
    {
        if (IdHolder > 0)
        {
            var data = CreateVehicleModel.Adapt(new UpdateVehicleRequestDTO());
            data.Id = IdHolder;
            Response = await vehicleService.UpdateVehicle(data);
        }
        else { Response = await vehicleService.AddVehicle(CreateVehicleModel); }

        ModelName = ModelNames.Vehicle;
        await DisplayToastMessage(Response);
    }

    private async Task DisplayToastMessage(Response response)
    {
        if (ModelName.Equals(ModelNames.Vehicle, StringComparison.OrdinalIgnoreCase))
            Vehicles = await vehicleService.GetVehicles();

        if (ModelName.Equals(ModelNames.VehicleBrand, StringComparison.OrdinalIgnoreCase))
            VehicleBrands = await vehicleService.GetVehicleBrands();

        if (ModelName.Equals(ModelNames.VehicleOwner, StringComparison.OrdinalIgnoreCase))
            VehicleOwners = await vehicleService.GetVehicleOwners();

        if (response.Flag)
        {
            ResetAllModels();
            toastService.ShowSuccessToast("Info", response.Message);
        }
        else
        {
            toastService.ShowErrorToast("Alert", response.Message);
        }
        IdHolder = 0;
        ModelName = string.Empty;
    }

    void EditVehicleClicked(GetVehicleResponseDTO model)
    {
        IdHolder = model.Id;
        ResetAllModels();
        ResetAllShowStates();
        CreateVehicleModel = model.Adapt(new CreateVehicleRequestDTO());
        ShowVehicleModel = true;
        BorderClass = "border-info rounded p-2 ml-2 mr-2 shadow-lg";
        ModalTitle = "Update Vehicle Data";
        OpenModal();
    }
    void EditVehicleBrandClicked(GetVehicleBrandResponseDTO model)
    {
        IdHolder = model.Id;
        ResetAllModels();
        ResetAllShowStates();
        CreateVehicleBrandModel = model.Adapt(new CreateVehicleBrandRequestDTO());
        ShowVehicleBrandModel = true;
        BorderClass = "border-success rounded p-2 ml-2 mr-2 shadow-lg";
        ModalTitle = "Update Vehicle Brand Data";
        OpenModal();
    }
    void EditVehicleOwnerClicked(GetVehicleOwnerResponseDTO model)
    {
        IdHolder = model.Id;
        ResetAllModels();
        ResetAllShowStates();
        CreateVehicleOwnerModel = model.Adapt(new CreateVehicleOwnerRequestDTO());
        ShowVehicleOwnerModel = true;
        BorderClass = "border-warning rounded p-2 ml-2 mr-2 shadow-lg";
        ModalTitle = "Update Vehicle Owner Data";
        OpenModal();
    }

    void ShowConfirmation() => confirmation!.Show();

    void DeleteVehicleClicked(GetVehicleResponseDTO model)
    {
        IdHolder = model.Id;
        ModelName = ModelNames.Vehicle;
        ComfirmationBorder = "btn-info";
        ShowConfirmation();
    }
    void DeleteVehicleBrandClicked(GetVehicleBrandResponseDTO model)
    {
        IdHolder = model.Id;
        ModelName = ModelNames.VehicleBrand;
        ComfirmationBorder = "btn-success";
        ShowConfirmation();
    }
    void DeleteVehicleOwnerClicked(GetVehicleOwnerResponseDTO model)
    {
        IdHolder = model.Id;
        ModelName = ModelNames.VehicleOwner;
        ComfirmationBorder = "btn-warning";
        ShowConfirmation();
    }
    async Task ConfirmDelete()
    {
        if (IdHolder <= 0) return;

        Response Response = new();
        if (ModelName.Equals(ModelNames.Vehicle, StringComparison.OrdinalIgnoreCase))
        {
            Response = await vehicleService.DeleteVehicle(IdHolder);
            await DisplayToastMessage(Response);
        }

        if (ModelName.Equals(ModelNames.VehicleBrand, StringComparison.OrdinalIgnoreCase))
        {
            Response = await vehicleService.DeleteVehicleBrand(IdHolder);
            await DisplayToastMessage(Response);
        }

        if (ModelName.Equals(ModelNames.VehicleOwner, StringComparison.OrdinalIgnoreCase))
        {
            Response = await vehicleService.DeleteVehicleOwner(IdHolder);
            await DisplayToastMessage(Response);
        }
    }

    public static class ModelNames
    {
        public const string Vehicle = "Vehicle";
        public const string VehicleBrand = "VehicleBrand";
        public const string VehicleOwner = "VehicleOwner";
    }
}

